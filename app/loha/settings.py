"""
Django settings for loha project.

Generated by 'django-admin startproject' using Django 2.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import firebase_admin
from firebase_admin import credentials
import os, json
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
secret_file = os.path.join(BASE_DIR, 'secrets.json')

with open(secret_file) as f:
    secrets = json.loads(f.read())


# Keep secret keys in secrets.json
def get_secret(setting, secrets=secrets):
    try:
        return secrets[setting]
    except KeyError:
        error_msg = "Set the {0} environment variable".format(setting)
        return None


cred_path = os.path.join(BASE_DIR, "serviceAccountKey.json")
cred = credentials.Certificate(cred_path)
firebase_admin.initialize_app(cred)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = int(get_secret("DEBUG"))
DEBUG = False

# SECRET_KEY
# IAMPORT
IAMPORT_CODE = get_secret('IAMPORT_CODE')
IAMPORT_REST_KEY = get_secret('IAMPORT_REST_KEY')
IAMPORT_SECRET_REST_KEY = get_secret('IAMPORT_SECRET_REST_KEY')
# CLAYFUL
CLAYFUL_SECRET_KEY = get_secret('CLAYFUL_SECRET_KEY')
# KAKAO
KAKAO_APP_ID = get_secret('KAKAO_APP_ID')
KAKAO_REST_API = get_secret('KAKAO_REST_API')
KAKAO_ADMIN_KEY = get_secret('KAKAO_ADMIN_KEY')
# NAVER
NAVER_CLIENT_ID = get_secret('NAVER_CLIENT_ID')
NAVER_SECRET_KEY = get_secret('NAVER_SECRET_KEY')

# FACEBOOK
FACEBOOK_CLIENT_ID = get_secret('FACEBOOK_CLIENT_ID')
FACEBOOK_SECRET_KEY = get_secret('FACEBOOK_SECRET_KEY')

# MUX
MUX_CLIENT_ID = get_secret('MUX_CLIENT_ID')
MUX_SECRET_KEY = get_secret('MUX_SECRET_KEY')

# HOST
ALLOWED_HOSTS = get_secret("DJANGO_ALLOWED_HOSTS")
# ALLOWED_HOSTS = ['*']

# COOLSMS
COOLSMS_API_KEY = get_secret("COOLSMS_API_KEY")
COOLSMS_API_SECRET = get_secret("COOLSMS_API_SECRET")

# Application definition

INSTALLED_APPS = [
    'channels',
    'chat',
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'user',
    'product',
    'category',
    'wishlist',
    'cart',
    'payment',
    'usergroup',
    'catalog',
    'coupon',
    'influencer',
    'media',
    'images',
    'review',
    'order',
    'webhook',
    'push',
    'forgetuser',
    'refund',
    'policy',
]

MIDDLEWARE = [
    'loha.middleware.HealthCheckMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'loha.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'loha.wsgi.application'

ASGI_APPLICATION = 'loha.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [('redis', 6379)],
        },
    },
}

# development settings
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': get_secret('APP_DB_ENGINE') or 'django.db.backends.sqlite3',
        'NAME': get_secret('DB_NAME') or os.path.join(BASE_DIR, 'db.sqlite3'),
        'USER': get_secret('DB_USER') or '',
        'PASSWORD': get_secret('PASSWORD') or '',
        'HOST': get_secret('HOST') or None,
        'PORT': get_secret('PORT') or None,
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'ko-kr'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

# USE_TZ = True
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
STATIC_ROOT = os.path.abspath('./static')
STATIC_URL = '/static/'

# 창 닫으면 로그아웃
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Datetime format
DATETIME_FORMAT = 'Y-m-d H:i:s'

# Send Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = get_secret('EMAIL_HOST') or None
EMAIL_HOST_USER = get_secret('EMAIL_HOST_USER') or None
EMAIL_HOST_PASSWORD = get_secret('EMAIL_HOST_PASSWORD') or None
EMAIL_PORT = get_secret('EMAIL_PORT') or None
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'file': {
            'level': 'INFO',
            'encoding': 'utf-8',
            'filters': ['require_debug_false'],
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/show.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins', 'file'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
        'my': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'callback': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
    }
}
